/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.tables.records.PersonTcRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonTc extends TableImpl<PersonTcRecord> {

    private static final long serialVersionUID = 1383072752;

    /**
     * The reference instance of <code>intest.person_tc</code>
     */
    public static final PersonTc PERSON_TC = new PersonTc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonTcRecord> getRecordType() {
        return PersonTcRecord.class;
    }

    /**
     * The column <code>intest.person_tc.id</code>.
     */
    public final TableField<PersonTcRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.person_tc_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.person_tc.deleted</code>.
     */
    public final TableField<PersonTcRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.person_tc.created_by</code>.
     */
    public final TableField<PersonTcRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.person_tc.created</code>.
     */
    public final TableField<PersonTcRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.person_tc.updated_by</code>.
     */
    public final TableField<PersonTcRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.person_tc.updated</code>.
     */
    public final TableField<PersonTcRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.person_tc.tx_id</code>.
     */
    public final TableField<PersonTcRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.person_tc.audit_id</code>.
     */
    public final TableField<PersonTcRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.person_tc.person_id</code>.
     */
    public final TableField<PersonTcRecord, Long> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>intest.person_tc.marketing_consent</code>.
     */
    public final TableField<PersonTcRecord, Boolean> MARKETING_CONSENT = createField("marketing_consent", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>intest.person_tc</code> table reference
     */
    public PersonTc() {
        this(DSL.name("person_tc"), null);
    }

    /**
     * Create an aliased <code>intest.person_tc</code> table reference
     */
    public PersonTc(String alias) {
        this(DSL.name(alias), PERSON_TC);
    }

    /**
     * Create an aliased <code>intest.person_tc</code> table reference
     */
    public PersonTc(Name alias) {
        this(alias, PERSON_TC);
    }

    private PersonTc(Name alias, Table<PersonTcRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonTc(Name alias, Table<PersonTcRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSON_TC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PersonTcRecord, Long> getIdentity() {
        return Keys.IDENTITY_PERSON_TC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PersonTcRecord> getPrimaryKey() {
        return Keys.PERSON_TC_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PersonTcRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonTcRecord>>asList(Keys.PERSON_TC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PersonTcRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PersonTcRecord, ?>>asList(Keys.PERSON_TC__PERSON_TC_PERSON_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonTc as(String alias) {
        return new PersonTc(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonTc as(Name alias) {
        return new PersonTc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTc rename(String name) {
        return new PersonTc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTc rename(Name name) {
        return new PersonTc(name, null);
    }
}
