/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.PaymentFrequency;
import com.unchartedpartners.databases.enums.SubscriptionQuoteStatus;
import com.unchartedpartners.databases.tables.records.SubscriptionQuoteRecord;
import com.unchartedpartners.jooq.PostgresJsonMapBinder;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionQuote extends TableImpl<SubscriptionQuoteRecord> {

    private static final long serialVersionUID = 109587895;

    /**
     * The reference instance of <code>intest.subscription_quote</code>
     */
    public static final SubscriptionQuote SUBSCRIPTION_QUOTE = new SubscriptionQuote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionQuoteRecord> getRecordType() {
        return SubscriptionQuoteRecord.class;
    }

    /**
     * The column <code>intest.subscription_quote.id</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.subscription_quote_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.subscription_quote.quotation_no</code>.
     */
    public final TableField<SubscriptionQuoteRecord, String> QUOTATION_NO = createField("quotation_no", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.contract_code</code>.
     */
    public final TableField<SubscriptionQuoteRecord, String> CONTRACT_CODE = createField("contract_code", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.contract_ref_no</code>.
     */
    public final TableField<SubscriptionQuoteRecord, String> CONTRACT_REF_NO = createField("contract_ref_no", org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>intest.subscription_quote.name</code>.
     */
    public final TableField<SubscriptionQuoteRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.account_id</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.product_id</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Long> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.product_code</code>.
     */
    public final TableField<SubscriptionQuoteRecord, String> PRODUCT_CODE = createField("product_code", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.product_version</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Long> PRODUCT_VERSION = createField("product_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.plan_no</code>.
     */
    public final TableField<SubscriptionQuoteRecord, String> PLAN_NO = createField("plan_no", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.subscription_quote.customer_data</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Map> CUSTOMER_DATA = createField("customer_data", org.jooq.impl.SQLDataType.OTHER, this, "", new PostgresJsonMapBinder());

    /**
     * The column <code>intest.subscription_quote.quote_data</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Map> QUOTE_DATA = createField("quote_data", org.jooq.impl.SQLDataType.OTHER, this, "", new PostgresJsonMapBinder());

    /**
     * The column <code>intest.subscription_quote.status</code>.
     */
    public final TableField<SubscriptionQuoteRecord, SubscriptionQuoteStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.SubscriptionQuoteStatus.class), this, "");

    /**
     * The column <code>intest.subscription_quote.payment_frequency</code>.
     */
    public final TableField<SubscriptionQuoteRecord, PaymentFrequency> PAYMENT_FREQUENCY = createField("payment_frequency", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.PaymentFrequency.class), this, "");

    /**
     * The column <code>intest.subscription_quote.consent</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Boolean> CONSENT = createField("consent", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>intest.subscription_quote.subscription_date</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Timestamp> SUBSCRIPTION_DATE = createField("subscription_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.subscription_quote.deleted</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.created_by</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.created</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.updated_by</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.updated</code>.
     */
    public final TableField<SubscriptionQuoteRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_quote.customer_no</code>.
     */
    public final TableField<SubscriptionQuoteRecord, String> CUSTOMER_NO = createField("customer_no", org.jooq.impl.SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * Create a <code>intest.subscription_quote</code> table reference
     */
    public SubscriptionQuote() {
        this(DSL.name("subscription_quote"), null);
    }

    /**
     * Create an aliased <code>intest.subscription_quote</code> table reference
     */
    public SubscriptionQuote(String alias) {
        this(DSL.name(alias), SUBSCRIPTION_QUOTE);
    }

    /**
     * Create an aliased <code>intest.subscription_quote</code> table reference
     */
    public SubscriptionQuote(Name alias) {
        this(alias, SUBSCRIPTION_QUOTE);
    }

    private SubscriptionQuote(Name alias, Table<SubscriptionQuoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubscriptionQuote(Name alias, Table<SubscriptionQuoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SUBSCRIPTION_QUOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SubscriptionQuoteRecord, Long> getIdentity() {
        return Keys.IDENTITY_SUBSCRIPTION_QUOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SubscriptionQuoteRecord> getPrimaryKey() {
        return Keys.SUBSCRIPTION_QUOTE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SubscriptionQuoteRecord>> getKeys() {
        return Arrays.<UniqueKey<SubscriptionQuoteRecord>>asList(Keys.SUBSCRIPTION_QUOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SubscriptionQuoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SubscriptionQuoteRecord, ?>>asList(Keys.SUBSCRIPTION_QUOTE__SUBSCRIPTION_QUOTE_PRODUCT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionQuote as(String alias) {
        return new SubscriptionQuote(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionQuote as(Name alias) {
        return new SubscriptionQuote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionQuote rename(String name) {
        return new SubscriptionQuote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionQuote rename(Name name) {
        return new SubscriptionQuote(name, null);
    }
}
