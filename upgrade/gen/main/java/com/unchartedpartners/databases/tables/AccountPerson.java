/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.AccountRole;
import com.unchartedpartners.databases.enums.Dependent;
import com.unchartedpartners.databases.enums.OccupationClass;
import com.unchartedpartners.databases.tables.records.AccountPersonRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountPerson extends TableImpl<AccountPersonRecord> {

    private static final long serialVersionUID = -145765796;

    /**
     * The reference instance of <code>intest.account_person</code>
     */
    public static final AccountPerson ACCOUNT_PERSON = new AccountPerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountPersonRecord> getRecordType() {
        return AccountPersonRecord.class;
    }

    /**
     * The column <code>intest.account_person.id</code>.
     */
    public final TableField<AccountPersonRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.account_person_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.account_person.account_id</code>.
     */
    public final TableField<AccountPersonRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>intest.account_person.person_id</code>.
     */
    public final TableField<AccountPersonRecord, Long> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>intest.account_person.role</code>.
     */
    public final TableField<AccountPersonRecord, AccountRole> ROLE = createField("role", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.AccountRole.class), this, "");

    /**
     * The column <code>intest.account_person.occupation</code>.
     */
    public final TableField<AccountPersonRecord, String> OCCUPATION = createField("occupation", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.account_person.occupation_class</code>.
     */
    public final TableField<AccountPersonRecord, OccupationClass> OCCUPATION_CLASS = createField("occupation_class", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.OccupationClass.class), this, "");

    /**
     * The column <code>intest.account_person.dependent</code>.
     */
    public final TableField<AccountPersonRecord, Dependent> DEPENDENT = createField("dependent", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.Dependent.class), this, "");

    /**
     * The column <code>intest.account_person.date_of_employment</code>.
     */
    public final TableField<AccountPersonRecord, Timestamp> DATE_OF_EMPLOYMENT = createField("date_of_employment", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.account_person.version</code>.
     */
    public final TableField<AccountPersonRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.account_person.deleted</code>.
     */
    public final TableField<AccountPersonRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.account_person.created_by</code>.
     */
    public final TableField<AccountPersonRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.account_person.created</code>.
     */
    public final TableField<AccountPersonRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.account_person.updated_by</code>.
     */
    public final TableField<AccountPersonRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.account_person.updated</code>.
     */
    public final TableField<AccountPersonRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.account_person.tx_id</code>.
     */
    public final TableField<AccountPersonRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.account_person.audit_id</code>.
     */
    public final TableField<AccountPersonRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.account_person.no_of_dependent</code>.
     */
    public final TableField<AccountPersonRecord, Long> NO_OF_DEPENDENT = createField("no_of_dependent", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>intest.account_person.dependent_id_no</code>.
     */
    public final TableField<AccountPersonRecord, String> DEPENDENT_ID_NO = createField("dependent_id_no", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.account_person.ga_last_update</code>.
     */
    public final TableField<AccountPersonRecord, Timestamp> GA_LAST_UPDATE = createField("ga_last_update", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.account_person.termination_date</code>.
     */
    public final TableField<AccountPersonRecord, Timestamp> TERMINATION_DATE = createField("termination_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>intest.account_person</code> table reference
     */
    public AccountPerson() {
        this(DSL.name("account_person"), null);
    }

    /**
     * Create an aliased <code>intest.account_person</code> table reference
     */
    public AccountPerson(String alias) {
        this(DSL.name(alias), ACCOUNT_PERSON);
    }

    /**
     * Create an aliased <code>intest.account_person</code> table reference
     */
    public AccountPerson(Name alias) {
        this(alias, ACCOUNT_PERSON);
    }

    private AccountPerson(Name alias, Table<AccountPersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountPerson(Name alias, Table<AccountPersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_PERSON_PKEY, Indexes.UQ_PERSON_ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountPersonRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_PERSON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountPersonRecord> getPrimaryKey() {
        return Keys.ACCOUNT_PERSON_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountPersonRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountPersonRecord>>asList(Keys.ACCOUNT_PERSON_PKEY, Keys.UQ_PERSON_ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountPersonRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountPersonRecord, ?>>asList(Keys.ACCOUNT_PERSON__ACCOUNT_PERSON_PERSON_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<AccountPersonRecord, Long> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountPerson as(String alias) {
        return new AccountPerson(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountPerson as(Name alias) {
        return new AccountPerson(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountPerson rename(String name) {
        return new AccountPerson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountPerson rename(Name name) {
        return new AccountPerson(name, null);
    }
}
