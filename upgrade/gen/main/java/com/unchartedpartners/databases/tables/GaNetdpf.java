/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.tables.records.GaNetdpfRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GaNetdpf extends TableImpl<GaNetdpfRecord> {

    private static final long serialVersionUID = 908474280;

    /**
     * The reference instance of <code>intest.ga_netdpf</code>
     */
    public static final GaNetdpf GA_NETDPF = new GaNetdpf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GaNetdpfRecord> getRecordType() {
        return GaNetdpfRecord.class;
    }

    /**
     * The column <code>intest.ga_netdpf.chdrcoy</code>.
     */
    public final TableField<GaNetdpfRecord, String> CHDRCOY = createField("chdrcoy", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>intest.ga_netdpf.provnet</code>.
     */
    public final TableField<GaNetdpfRecord, String> PROVNET = createField("provnet", org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>intest.ga_netdpf.clntcoy</code>.
     */
    public final TableField<GaNetdpfRecord, String> CLNTCOY = createField("clntcoy", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>intest.ga_netdpf.provorg</code>.
     */
    public final TableField<GaNetdpfRecord, String> PROVORG = createField("provorg", org.jooq.impl.SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>intest.ga_netdpf.strtdt</code>.
     */
    public final TableField<GaNetdpfRecord, Integer> STRTDT = createField("strtdt", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>intest.ga_netdpf.enddt</code>.
     */
    public final TableField<GaNetdpfRecord, Integer> ENDDT = createField("enddt", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>intest.ga_netdpf.pos</code>.
     */
    public final TableField<GaNetdpfRecord, String> POS = createField("pos", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>intest.ga_netdpf.provcap</code>.
     */
    public final TableField<GaNetdpfRecord, String> PROVCAP = createField("provcap", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>intest.ga_netdpf.clamtype</code>.
     */
    public final TableField<GaNetdpfRecord, String> CLAMTYPE = createField("clamtype", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>intest.ga_netdpf.netlevel</code>.
     */
    public final TableField<GaNetdpfRecord, String> NETLEVEL = createField("netlevel", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>intest.ga_netdpf.feeschid</code>.
     */
    public final TableField<GaNetdpfRecord, String> FEESCHID = createField("feeschid", org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>intest.ga_netdpf.paycoy</code>.
     */
    public final TableField<GaNetdpfRecord, String> PAYCOY = createField("paycoy", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>intest.ga_netdpf.payclt</code>.
     */
    public final TableField<GaNetdpfRecord, String> PAYCLT = createField("payclt", org.jooq.impl.SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>intest.ga_netdpf.reqntype</code>.
     */
    public final TableField<GaNetdpfRecord, String> REQNTYPE = createField("reqntype", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>intest.ga_netdpf.whrule</code>.
     */
    public final TableField<GaNetdpfRecord, String> WHRULE = createField("whrule", org.jooq.impl.SQLDataType.VARCHAR(4), this, "");

    /**
     * The column <code>intest.ga_netdpf.user_profile</code>.
     */
    public final TableField<GaNetdpfRecord, String> USER_PROFILE = createField("user_profile", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.ga_netdpf.job_name</code>.
     */
    public final TableField<GaNetdpfRecord, String> JOB_NAME = createField("job_name", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.ga_netdpf.datime</code>.
     */
    public final TableField<GaNetdpfRecord, Timestamp> DATIME = createField("datime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.ga_netdpf.rrn</code>.
     */
    public final TableField<GaNetdpfRecord, Long> RRN = createField("rrn", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>intest.ga_netdpf.eb_timestamp</code>.
     */
    public final TableField<GaNetdpfRecord, Timestamp> EB_TIMESTAMP = createField("eb_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.ga_netdpf.id</code>.
     */
    public final TableField<GaNetdpfRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.ga_netdpf_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>intest.ga_netdpf</code> table reference
     */
    public GaNetdpf() {
        this(DSL.name("ga_netdpf"), null);
    }

    /**
     * Create an aliased <code>intest.ga_netdpf</code> table reference
     */
    public GaNetdpf(String alias) {
        this(DSL.name(alias), GA_NETDPF);
    }

    /**
     * Create an aliased <code>intest.ga_netdpf</code> table reference
     */
    public GaNetdpf(Name alias) {
        this(alias, GA_NETDPF);
    }

    private GaNetdpf(Name alias, Table<GaNetdpfRecord> aliased) {
        this(alias, aliased, null);
    }

    private GaNetdpf(Name alias, Table<GaNetdpfRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GA_NETDPF_IND, Indexes.GA_NETDPF_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GaNetdpfRecord, Long> getIdentity() {
        return Keys.IDENTITY_GA_NETDPF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GaNetdpfRecord> getPrimaryKey() {
        return Keys.GA_NETDPF_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GaNetdpfRecord>> getKeys() {
        return Arrays.<UniqueKey<GaNetdpfRecord>>asList(Keys.GA_NETDPF_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GaNetdpf as(String alias) {
        return new GaNetdpf(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GaNetdpf as(Name alias) {
        return new GaNetdpf(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GaNetdpf rename(String name) {
        return new GaNetdpf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GaNetdpf rename(Name name) {
        return new GaNetdpf(name, null);
    }
}
