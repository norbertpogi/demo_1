/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.CredentialReqType;
import com.unchartedpartners.databases.tables.records.CredentialReqRecord;
import com.unchartedpartners.jooq.PostgresSmallIntIntegerConverter;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CredentialReq extends TableImpl<CredentialReqRecord> {

    private static final long serialVersionUID = 336544838;

    /**
     * The reference instance of <code>intest.credential_req</code>
     */
    public static final CredentialReq CREDENTIAL_REQ = new CredentialReq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CredentialReqRecord> getRecordType() {
        return CredentialReqRecord.class;
    }

    /**
     * The column <code>intest.credential_req.id</code>.
     */
    public final TableField<CredentialReqRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.credential_req_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.credential_req.code</code>.
     */
    public final TableField<CredentialReqRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.person_id</code>.
     */
    public final TableField<CredentialReqRecord, Long> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.expiry_time</code>.
     */
    public final TableField<CredentialReqRecord, Timestamp> EXPIRY_TIME = createField("expiry_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.type</code>.
     */
    public final TableField<CredentialReqRecord, CredentialReqType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.CredentialReqType.class), this, "");

    /**
     * The column <code>intest.credential_req.otp</code>.
     */
    public final TableField<CredentialReqRecord, String> OTP = createField("otp", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>intest.credential_req.deleted</code>.
     */
    public final TableField<CredentialReqRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.created_by</code>.
     */
    public final TableField<CredentialReqRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.created</code>.
     */
    public final TableField<CredentialReqRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.updated_by</code>.
     */
    public final TableField<CredentialReqRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.updated</code>.
     */
    public final TableField<CredentialReqRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.tx_id</code>.
     */
    public final TableField<CredentialReqRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.audit_id</code>.
     */
    public final TableField<CredentialReqRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.credential_req.otp_expiry_time</code>.
     */
    public final TableField<CredentialReqRecord, Timestamp> OTP_EXPIRY_TIME = createField("otp_expiry_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.credential_req.times</code>.
     */
    public final TableField<CredentialReqRecord, Integer> TIMES = createField("times", org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.SMALLINT)), this, "", new PostgresSmallIntIntegerConverter());

    /**
     * Create a <code>intest.credential_req</code> table reference
     */
    public CredentialReq() {
        this(DSL.name("credential_req"), null);
    }

    /**
     * Create an aliased <code>intest.credential_req</code> table reference
     */
    public CredentialReq(String alias) {
        this(DSL.name(alias), CREDENTIAL_REQ);
    }

    /**
     * Create an aliased <code>intest.credential_req</code> table reference
     */
    public CredentialReq(Name alias) {
        this(alias, CREDENTIAL_REQ);
    }

    private CredentialReq(Name alias, Table<CredentialReqRecord> aliased) {
        this(alias, aliased, null);
    }

    private CredentialReq(Name alias, Table<CredentialReqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CREDENTIAL_REQ_CODE_KEY, Indexes.CREDENTIAL_REQ_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CredentialReqRecord, Long> getIdentity() {
        return Keys.IDENTITY_CREDENTIAL_REQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CredentialReqRecord> getPrimaryKey() {
        return Keys.CREDENTIAL_REQ_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CredentialReqRecord>> getKeys() {
        return Arrays.<UniqueKey<CredentialReqRecord>>asList(Keys.CREDENTIAL_REQ_PKEY, Keys.CREDENTIAL_REQ_CODE_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CredentialReqRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CredentialReqRecord, ?>>asList(Keys.CREDENTIAL_REQ__CREDENTIAL_REQ_PERSON_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CredentialReq as(String alias) {
        return new CredentialReq(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CredentialReq as(Name alias) {
        return new CredentialReq(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CredentialReq rename(String name) {
        return new CredentialReq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CredentialReq rename(Name name) {
        return new CredentialReq(name, null);
    }
}
