/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.FileType;
import com.unchartedpartners.databases.tables.records.DataFileRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataFile extends TableImpl<DataFileRecord> {

    private static final long serialVersionUID = 1049510573;

    /**
     * The reference instance of <code>intest.data_file</code>
     */
    public static final DataFile DATA_FILE = new DataFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataFileRecord> getRecordType() {
        return DataFileRecord.class;
    }

    /**
     * The column <code>intest.data_file.id</code>.
     */
    public final TableField<DataFileRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.data_file_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.data_file.name</code>.
     */
    public final TableField<DataFileRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.data_file.data</code>.
     */
    public final TableField<DataFileRecord, byte[]> DATA = createField("data", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>intest.data_file.file_type</code>.
     */
    public final TableField<DataFileRecord, FileType> FILE_TYPE = createField("file_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.FileType.class), this, "");

    /**
     * The column <code>intest.data_file.deleted</code>.
     */
    public final TableField<DataFileRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.data_file.created_by</code>.
     */
    public final TableField<DataFileRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.data_file.created</code>.
     */
    public final TableField<DataFileRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.data_file.updated_by</code>.
     */
    public final TableField<DataFileRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.data_file.updated</code>.
     */
    public final TableField<DataFileRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.data_file.tx_id</code>.
     */
    public final TableField<DataFileRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.data_file.audit_id</code>.
     */
    public final TableField<DataFileRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>intest.data_file</code> table reference
     */
    public DataFile() {
        this(DSL.name("data_file"), null);
    }

    /**
     * Create an aliased <code>intest.data_file</code> table reference
     */
    public DataFile(String alias) {
        this(DSL.name(alias), DATA_FILE);
    }

    /**
     * Create an aliased <code>intest.data_file</code> table reference
     */
    public DataFile(Name alias) {
        this(alias, DATA_FILE);
    }

    private DataFile(Name alias, Table<DataFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataFile(Name alias, Table<DataFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_FILE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DataFileRecord, Long> getIdentity() {
        return Keys.IDENTITY_DATA_FILE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataFileRecord> getPrimaryKey() {
        return Keys.DATA_FILE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataFileRecord>> getKeys() {
        return Arrays.<UniqueKey<DataFileRecord>>asList(Keys.DATA_FILE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataFile as(String alias) {
        return new DataFile(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataFile as(Name alias) {
        return new DataFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataFile rename(String name) {
        return new DataFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataFile rename(Name name) {
        return new DataFile(name, null);
    }
}
