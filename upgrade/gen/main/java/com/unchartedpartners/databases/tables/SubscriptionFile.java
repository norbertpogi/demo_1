/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.tables.records.SubscriptionFileRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionFile extends TableImpl<SubscriptionFileRecord> {

    private static final long serialVersionUID = -1369794404;

    /**
     * The reference instance of <code>intest.subscription_file</code>
     */
    public static final SubscriptionFile SUBSCRIPTION_FILE = new SubscriptionFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionFileRecord> getRecordType() {
        return SubscriptionFileRecord.class;
    }

    /**
     * The column <code>intest.subscription_file.id</code>.
     */
    public final TableField<SubscriptionFileRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.subscription_file_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.subscription_file.subscription_id</code>.
     */
    public final TableField<SubscriptionFileRecord, Long> SUBSCRIPTION_ID = createField("subscription_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_file.data_file_id</code>.
     */
    public final TableField<SubscriptionFileRecord, Long> DATA_FILE_ID = createField("data_file_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_file.deleted</code>.
     */
    public final TableField<SubscriptionFileRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_file.created_by</code>.
     */
    public final TableField<SubscriptionFileRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_file.created</code>.
     */
    public final TableField<SubscriptionFileRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_file.updated_by</code>.
     */
    public final TableField<SubscriptionFileRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.subscription_file.updated</code>.
     */
    public final TableField<SubscriptionFileRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>intest.subscription_file</code> table reference
     */
    public SubscriptionFile() {
        this(DSL.name("subscription_file"), null);
    }

    /**
     * Create an aliased <code>intest.subscription_file</code> table reference
     */
    public SubscriptionFile(String alias) {
        this(DSL.name(alias), SUBSCRIPTION_FILE);
    }

    /**
     * Create an aliased <code>intest.subscription_file</code> table reference
     */
    public SubscriptionFile(Name alias) {
        this(alias, SUBSCRIPTION_FILE);
    }

    private SubscriptionFile(Name alias, Table<SubscriptionFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubscriptionFile(Name alias, Table<SubscriptionFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SUBSCRIPTION_FILE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SubscriptionFileRecord, Long> getIdentity() {
        return Keys.IDENTITY_SUBSCRIPTION_FILE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SubscriptionFileRecord> getPrimaryKey() {
        return Keys.SUBSCRIPTION_FILE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SubscriptionFileRecord>> getKeys() {
        return Arrays.<UniqueKey<SubscriptionFileRecord>>asList(Keys.SUBSCRIPTION_FILE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionFile as(String alias) {
        return new SubscriptionFile(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionFile as(Name alias) {
        return new SubscriptionFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionFile rename(String name) {
        return new SubscriptionFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionFile rename(Name name) {
        return new SubscriptionFile(name, null);
    }
}
