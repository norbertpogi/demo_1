/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables.daos;


import com.unchartedpartners.dao.BaseDaoImpl;
import com.unchartedpartners.databases.enums.AccountStatus;
import com.unchartedpartners.databases.enums.AccountType;
import com.unchartedpartners.databases.tables.Account;
import com.unchartedpartners.databases.tables.records.AccountRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository(value="baseAccountDao")
@ConditionalOnMissingBean(name="accountDao")
public class AccountDao extends BaseDaoImpl<AccountRecord, com.unchartedpartners.databases.tables.pojos.Account, Long> {

    /**
     * Create a new AccountDao without any configuration
     */
    public AccountDao() {
        super(Account.ACCOUNT, com.unchartedpartners.databases.tables.pojos.Account.class);
    }

    /**
     * Create a new AccountDao with an attached configuration
     */
    public AccountDao(Configuration configuration) {
        super(Account.ACCOUNT, com.unchartedpartners.databases.tables.pojos.Account.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.unchartedpartners.databases.tables.pojos.Account object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchById(Long... values) {
        return fetch(Account.ACCOUNT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.unchartedpartners.databases.tables.pojos.Account fetchOneById(Long value) {
        return fetchOne(Account.ACCOUNT.ID, value);
    }

    /**
     * Fetch records that have <code>parent_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByParentId(Long... values) {
        return fetch(Account.ACCOUNT.PARENT_ID, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByName(String... values) {
        return fetch(Account.ACCOUNT.NAME, values);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByType(AccountType... values) {
        return fetch(Account.ACCOUNT.TYPE, values);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByStatus(AccountStatus... values) {
        return fetch(Account.ACCOUNT.STATUS, values);
    }

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByPath(String... values) {
        return fetch(Account.ACCOUNT.PATH, values);
    }

    /**
     * Fetch records that have <code>company_tag IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByCompanyTag(String... values) {
        return fetch(Account.ACCOUNT.COMPANY_TAG, values);
    }

    /**
     * Fetch records that have <code>ip_whitelist IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByIpWhitelist(Integer... values) {
        return fetch(Account.ACCOUNT.IP_WHITELIST, values);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByVersion(Long... values) {
        return fetch(Account.ACCOUNT.VERSION, values);
    }

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByDeleted(Boolean... values) {
        return fetch(Account.ACCOUNT.DELETED, values);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByCreatedBy(Long... values) {
        return fetch(Account.ACCOUNT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByCreated(Timestamp... values) {
        return fetch(Account.ACCOUNT.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByUpdatedBy(Long... values) {
        return fetch(Account.ACCOUNT.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByUpdated(Timestamp... values) {
        return fetch(Account.ACCOUNT.UPDATED, values);
    }

    /**
     * Fetch records that have <code>tx_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByTxId(String... values) {
        return fetch(Account.ACCOUNT.TX_ID, values);
    }

    /**
     * Fetch records that have <code>audit_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByAuditId(Long... values) {
        return fetch(Account.ACCOUNT.AUDIT_ID, values);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.Account> fetchByCode(String... values) {
        return fetch(Account.ACCOUNT.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public com.unchartedpartners.databases.tables.pojos.Account fetchOneByCode(String value) {
        return fetchOne(Account.ACCOUNT.CODE, value);
    }
}
