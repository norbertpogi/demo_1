/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.CauseOfClaimType;
import com.unchartedpartners.databases.enums.ClaimStatus;
import com.unchartedpartners.databases.enums.ClaimType;
import com.unchartedpartners.databases.enums.PaymentMethod;
import com.unchartedpartners.databases.tables.records.ClaimRecord;
import com.unchartedpartners.jooq.PostgresJsonMapBinder;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Claim extends TableImpl<ClaimRecord> {

    private static final long serialVersionUID = 924846647;

    /**
     * The reference instance of <code>intest.claim</code>
     */
    public static final Claim CLAIM = new Claim();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClaimRecord> getRecordType() {
        return ClaimRecord.class;
    }

    /**
     * The column <code>intest.claim.id</code>.
     */
    public final TableField<ClaimRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.claim_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.claim.name</code>.
     */
    public final TableField<ClaimRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.claim.claim_no</code>.
     */
    public final TableField<ClaimRecord, String> CLAIM_NO = createField("claim_no", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>intest.claim.employee_id</code>.
     */
    public final TableField<ClaimRecord, Long> EMPLOYEE_ID = createField("employee_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.claim.claimant_id</code>.
     */
    public final TableField<ClaimRecord, Long> CLAIMANT_ID = createField("claimant_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.claim.date_of_consultation</code>.
     */
    public final TableField<ClaimRecord, Timestamp> DATE_OF_CONSULTATION = createField("date_of_consultation", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.claim.bill_amount</code>.
     */
    public final TableField<ClaimRecord, BigDecimal> BILL_AMOUNT = createField("bill_amount", org.jooq.impl.SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>intest.claim.pay_back_amount</code>.
     */
    public final TableField<ClaimRecord, BigDecimal> PAY_BACK_AMOUNT = createField("pay_back_amount", org.jooq.impl.SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>intest.claim.currency</code>.
     */
    public final TableField<ClaimRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.claim.illness_description</code>.
     */
    public final TableField<ClaimRecord, String> ILLNESS_DESCRIPTION = createField("illness_description", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>intest.claim.illness_start_date</code>.
     */
    public final TableField<ClaimRecord, String> ILLNESS_START_DATE = createField("illness_start_date", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>intest.claim.accident_description</code>.
     */
    public final TableField<ClaimRecord, String> ACCIDENT_DESCRIPTION = createField("accident_description", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>intest.claim.accident_date</code>.
     */
    public final TableField<ClaimRecord, Timestamp> ACCIDENT_DATE = createField("accident_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.claim.accident_work_related</code>.
     */
    public final TableField<ClaimRecord, Boolean> ACCIDENT_WORK_RELATED = createField("accident_work_related", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>intest.claim.payment_method</code>.
     */
    public final TableField<ClaimRecord, PaymentMethod> PAYMENT_METHOD = createField("payment_method", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.PaymentMethod.class), this, "");

    /**
     * The column <code>intest.claim.bank_name</code>.
     */
    public final TableField<ClaimRecord, String> BANK_NAME = createField("bank_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.claim.bank_branch_id</code>.
     */
    public final TableField<ClaimRecord, String> BANK_BRANCH_ID = createField("bank_branch_id", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.claim.bank_account_number</code>.
     */
    public final TableField<ClaimRecord, String> BANK_ACCOUNT_NUMBER = createField("bank_account_number", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.claim.claim_status</code>.
     */
    public final TableField<ClaimRecord, ClaimStatus> CLAIM_STATUS = createField("claim_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.ClaimStatus.class), this, "");

    /**
     * The column <code>intest.claim.claim_type</code>.
     */
    public final TableField<ClaimRecord, ClaimType> CLAIM_TYPE = createField("claim_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.ClaimType.class), this, "");

    /**
     * The column <code>intest.claim.cause_of_claim_type</code>.
     */
    public final TableField<ClaimRecord, CauseOfClaimType> CAUSE_OF_CLAIM_TYPE = createField("cause_of_claim_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.CauseOfClaimType.class), this, "");

    /**
     * The column <code>intest.claim.notes</code>.
     */
    public final TableField<ClaimRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>intest.claim.deleted</code>.
     */
    public final TableField<ClaimRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.claim.created_by</code>.
     */
    public final TableField<ClaimRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.claim.created</code>.
     */
    public final TableField<ClaimRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.claim.updated_by</code>.
     */
    public final TableField<ClaimRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.claim.updated</code>.
     */
    public final TableField<ClaimRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.claim.tx_id</code>.
     */
    public final TableField<ClaimRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.claim.audit_id</code>.
     */
    public final TableField<ClaimRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.claim.reference_number</code>.
     */
    public final TableField<ClaimRecord, String> REFERENCE_NUMBER = createField("reference_number", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>intest.claim.claim_remarks</code>.
     */
    public final TableField<ClaimRecord, String> CLAIM_REMARKS = createField("claim_remarks", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>intest.claim.rejection_reason</code>.
     */
    public final TableField<ClaimRecord, String> REJECTION_REASON = createField("rejection_reason", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>intest.claim.follow_up</code>.
     */
    public final TableField<ClaimRecord, Map> FOLLOW_UP = createField("follow_up", org.jooq.impl.SQLDataType.OTHER, this, "", new PostgresJsonMapBinder());

    /**
     * The column <code>intest.claim.claim_case_notes</code>.
     */
    public final TableField<ClaimRecord, String> CLAIM_CASE_NOTES = createField("claim_case_notes", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>intest.claim.claimant_remarks</code>.
     */
    public final TableField<ClaimRecord, String> CLAIMANT_REMARKS = createField("claimant_remarks", org.jooq.impl.SQLDataType.VARCHAR(10000), this, "");

    /**
     * The column <code>intest.claim.bank_account_holder_name</code>.
     */
    public final TableField<ClaimRecord, String> BANK_ACCOUNT_HOLDER_NAME = createField("bank_account_holder_name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>intest.claim.clinic_id</code>.
     */
    public final TableField<ClaimRecord, String> CLINIC_ID = createField("clinic_id", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.claim.clinic_name</code>.
     */
    public final TableField<ClaimRecord, String> CLINIC_NAME = createField("clinic_name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>intest.claim.diagnosis_id</code>.
     */
    public final TableField<ClaimRecord, String> DIAGNOSIS_ID = createField("diagnosis_id", org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>intest.claim.diagnosis_name</code>.
     */
    public final TableField<ClaimRecord, String> DIAGNOSIS_NAME = createField("diagnosis_name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>intest.claim.bank_id</code>.
     */
    public final TableField<ClaimRecord, String> BANK_ID = createField("bank_id", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.claim.received_date</code>.
     */
    public final TableField<ClaimRecord, Timestamp> RECEIVED_DATE = createField("received_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.claim.hr_claim</code>.
     */
    public final TableField<ClaimRecord, Boolean> HR_CLAIM = createField("hr_claim", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>intest.claim</code> table reference
     */
    public Claim() {
        this(DSL.name("claim"), null);
    }

    /**
     * Create an aliased <code>intest.claim</code> table reference
     */
    public Claim(String alias) {
        this(DSL.name(alias), CLAIM);
    }

    /**
     * Create an aliased <code>intest.claim</code> table reference
     */
    public Claim(Name alias) {
        this(alias, CLAIM);
    }

    private Claim(Name alias, Table<ClaimRecord> aliased) {
        this(alias, aliased, null);
    }

    private Claim(Name alias, Table<ClaimRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLAIM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClaimRecord, Long> getIdentity() {
        return Keys.IDENTITY_CLAIM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClaimRecord> getPrimaryKey() {
        return Keys.CLAIM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClaimRecord>> getKeys() {
        return Arrays.<UniqueKey<ClaimRecord>>asList(Keys.CLAIM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClaimRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClaimRecord, ?>>asList(Keys.CLAIM__CLAIM_EMPLOYEE_ID_FK, Keys.CLAIM__CLAIM_CLAIMANT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Claim as(String alias) {
        return new Claim(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Claim as(Name alias) {
        return new Claim(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Claim rename(String name) {
        return new Claim(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Claim rename(Name name) {
        return new Claim(name, null);
    }
}
