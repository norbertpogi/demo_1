/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables.daos;


import com.unchartedpartners.dao.BaseDaoImpl;
import com.unchartedpartners.databases.enums.CredentialReqType;
import com.unchartedpartners.databases.tables.CredentialReq;
import com.unchartedpartners.databases.tables.records.CredentialReqRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository(value="baseCredentialReqDao")
@ConditionalOnMissingBean(name="credentialReqDao")
public class CredentialReqDao extends BaseDaoImpl<CredentialReqRecord, com.unchartedpartners.databases.tables.pojos.CredentialReq, Long> {

    /**
     * Create a new CredentialReqDao without any configuration
     */
    public CredentialReqDao() {
        super(CredentialReq.CREDENTIAL_REQ, com.unchartedpartners.databases.tables.pojos.CredentialReq.class);
    }

    /**
     * Create a new CredentialReqDao with an attached configuration
     */
    public CredentialReqDao(Configuration configuration) {
        super(CredentialReq.CREDENTIAL_REQ, com.unchartedpartners.databases.tables.pojos.CredentialReq.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.unchartedpartners.databases.tables.pojos.CredentialReq object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchById(Long... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.unchartedpartners.databases.tables.pojos.CredentialReq fetchOneById(Long value) {
        return fetchOne(CredentialReq.CREDENTIAL_REQ.ID, value);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByCode(String... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public com.unchartedpartners.databases.tables.pojos.CredentialReq fetchOneByCode(String value) {
        return fetchOne(CredentialReq.CREDENTIAL_REQ.CODE, value);
    }

    /**
     * Fetch records that have <code>person_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByPersonId(Long... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.PERSON_ID, values);
    }

    /**
     * Fetch records that have <code>expiry_time IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByExpiryTime(Timestamp... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.EXPIRY_TIME, values);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByType(CredentialReqType... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.TYPE, values);
    }

    /**
     * Fetch records that have <code>otp IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByOtp(String... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.OTP, values);
    }

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByDeleted(Boolean... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.DELETED, values);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByCreatedBy(Long... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByCreated(Timestamp... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByUpdatedBy(Long... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByUpdated(Timestamp... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.UPDATED, values);
    }

    /**
     * Fetch records that have <code>tx_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByTxId(String... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.TX_ID, values);
    }

    /**
     * Fetch records that have <code>audit_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByAuditId(Long... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.AUDIT_ID, values);
    }

    /**
     * Fetch records that have <code>otp_expiry_time IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByOtpExpiryTime(Timestamp... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.OTP_EXPIRY_TIME, values);
    }

    /**
     * Fetch records that have <code>times IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.CredentialReq> fetchByTimes(Integer... values) {
        return fetch(CredentialReq.CREDENTIAL_REQ.TIMES, values);
    }
}
