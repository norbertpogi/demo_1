/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.tables.records.PartnerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Partner extends TableImpl<PartnerRecord> {

    private static final long serialVersionUID = -1275939352;

    /**
     * The reference instance of <code>intest.partner</code>
     */
    public static final Partner PARTNER = new Partner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartnerRecord> getRecordType() {
        return PartnerRecord.class;
    }

    /**
     * The column <code>intest.partner.id</code>.
     */
    public final TableField<PartnerRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.partner_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.partner.name</code>.
     */
    public final TableField<PartnerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.partner.contact_person_name</code>.
     */
    public final TableField<PartnerRecord, String> CONTACT_PERSON_NAME = createField("contact_person_name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.partner.email</code>.
     */
    public final TableField<PartnerRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.partner.content</code>.
     */
    public final TableField<PartnerRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>intest.partner.deleted</code>.
     */
    public final TableField<PartnerRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.partner.created_by</code>.
     */
    public final TableField<PartnerRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.partner.created</code>.
     */
    public final TableField<PartnerRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.partner.updated_by</code>.
     */
    public final TableField<PartnerRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.partner.updated</code>.
     */
    public final TableField<PartnerRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.partner.tx_id</code>.
     */
    public final TableField<PartnerRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.partner.audit_id</code>.
     */
    public final TableField<PartnerRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>intest.partner</code> table reference
     */
    public Partner() {
        this(DSL.name("partner"), null);
    }

    /**
     * Create an aliased <code>intest.partner</code> table reference
     */
    public Partner(String alias) {
        this(DSL.name(alias), PARTNER);
    }

    /**
     * Create an aliased <code>intest.partner</code> table reference
     */
    public Partner(Name alias) {
        this(alias, PARTNER);
    }

    private Partner(Name alias, Table<PartnerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Partner(Name alias, Table<PartnerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PARTNER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PartnerRecord, Long> getIdentity() {
        return Keys.IDENTITY_PARTNER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PartnerRecord> getPrimaryKey() {
        return Keys.PARTNER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PartnerRecord>> getKeys() {
        return Arrays.<UniqueKey<PartnerRecord>>asList(Keys.PARTNER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Partner as(String alias) {
        return new Partner(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Partner as(Name alias) {
        return new Partner(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partner rename(String name) {
        return new Partner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partner rename(Name name) {
        return new Partner(name, null);
    }
}
