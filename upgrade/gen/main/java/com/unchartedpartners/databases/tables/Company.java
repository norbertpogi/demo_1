/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.AccountStatus;
import com.unchartedpartners.databases.enums.AccountType;
import com.unchartedpartners.databases.enums.CompanyStatus;
import com.unchartedpartners.databases.tables.records.CompanyRecord;
import com.unchartedpartners.jooq.PostgresSmallIntIntegerConverter;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 349557370;

    /**
     * The reference instance of <code>intest.company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>intest.company.id</code>.
     */
    public final TableField<CompanyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.account_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.company.parent_id</code>.
     */
    public final TableField<CompanyRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.company.name</code>.
     */
    public final TableField<CompanyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.company.type</code>.
     */
    public final TableField<CompanyRecord, AccountType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.AccountType.class), this, "");

    /**
     * The column <code>intest.company.status</code>.
     */
    public final TableField<CompanyRecord, AccountStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.AccountStatus.class), this, "");

    /**
     * The column <code>intest.company.path</code>.
     */
    public final TableField<CompanyRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.company.company_tag</code>.
     */
    public final TableField<CompanyRecord, String> COMPANY_TAG = createField("company_tag", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.company.ip_whitelist</code>.
     */
    public final TableField<CompanyRecord, Integer> IP_WHITELIST = createField("ip_whitelist", org.jooq.impl.SQLDataType.SMALLINT, this, "", new PostgresSmallIntIntegerConverter());

    /**
     * The column <code>intest.company.version</code>.
     */
    public final TableField<CompanyRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.company.deleted</code>.
     */
    public final TableField<CompanyRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.company.created_by</code>.
     */
    public final TableField<CompanyRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.company.created</code>.
     */
    public final TableField<CompanyRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.company.updated_by</code>.
     */
    public final TableField<CompanyRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.company.updated</code>.
     */
    public final TableField<CompanyRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.company.tx_id</code>.
     */
    public final TableField<CompanyRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.company.audit_id</code>.
     */
    public final TableField<CompanyRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.company.company_id</code>.
     */
    public final TableField<CompanyRecord, Long> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.company_company_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.company.notes</code>.
     */
    public final TableField<CompanyRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>intest.company.nature_of_business</code>.
     */
    public final TableField<CompanyRecord, String> NATURE_OF_BUSINESS = createField("nature_of_business", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.company.uen_no</code>.
     */
    public final TableField<CompanyRecord, String> UEN_NO = createField("uen_no", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.company.company_status</code>.
     */
    public final TableField<CompanyRecord, CompanyStatus> COMPANY_STATUS = createField("company_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.CompanyStatus.class), this, "");

    /**
     * The column <code>intest.company.address</code>.
     */
    public final TableField<CompanyRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>intest.company.postal_code</code>.
     */
    public final TableField<CompanyRecord, String> POSTAL_CODE = createField("postal_code", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.company.encrypted_password</code>.
     */
    public final TableField<CompanyRecord, String> ENCRYPTED_PASSWORD = createField("encrypted_password", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.company.braintree_customer_id</code>.
     */
    public final TableField<CompanyRecord, String> BRAINTREE_CUSTOMER_ID = createField("braintree_customer_id", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.company.braintree_token</code>.
     */
    public final TableField<CompanyRecord, String> BRAINTREE_TOKEN = createField("braintree_token", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.company.card_holder_name</code>.
     */
    public final TableField<CompanyRecord, String> CARD_HOLDER_NAME = createField("card_holder_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.company.code</code>.
     */
    public final TableField<CompanyRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.field("(currval('intest.account_id_seq'::regclass))::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>intest.company</code> table reference
     */
    public Company() {
        this(DSL.name("company"), null);
    }

    /**
     * Create an aliased <code>intest.company</code> table reference
     */
    public Company(String alias) {
        this(DSL.name(alias), COMPANY);
    }

    /**
     * Create an aliased <code>intest.company</code> table reference
     */
    public Company(Name alias) {
        this(alias, COMPANY);
    }

    private Company(Name alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Company(Name alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompanyRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMPANY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.COMPANY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompanyRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyRecord>>asList(Keys.COMPANY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<CompanyRecord, Long> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Company as(String alias) {
        return new Company(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Company as(Name alias) {
        return new Company(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(String name) {
        return new Company(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Name name) {
        return new Company(name, null);
    }
}
