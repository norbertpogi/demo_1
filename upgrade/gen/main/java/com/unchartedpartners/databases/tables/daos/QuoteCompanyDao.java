/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables.daos;


import com.unchartedpartners.dao.BaseDaoImpl;
import com.unchartedpartners.databases.tables.QuoteCompany;
import com.unchartedpartners.databases.tables.records.QuoteCompanyRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository(value="baseQuoteCompanyDao")
@ConditionalOnMissingBean(name="quoteCompanyDao")
public class QuoteCompanyDao extends BaseDaoImpl<QuoteCompanyRecord, com.unchartedpartners.databases.tables.pojos.QuoteCompany, Record2<Long, Long>> {

    /**
     * Create a new QuoteCompanyDao without any configuration
     */
    public QuoteCompanyDao() {
        super(QuoteCompany.QUOTE_COMPANY, com.unchartedpartners.databases.tables.pojos.QuoteCompany.class);
    }

    /**
     * Create a new QuoteCompanyDao with an attached configuration
     */
    public QuoteCompanyDao(Configuration configuration) {
        super(QuoteCompany.QUOTE_COMPANY, com.unchartedpartners.databases.tables.pojos.QuoteCompany.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record2<Long, Long> getId(com.unchartedpartners.databases.tables.pojos.QuoteCompany object) {
        return compositeKeyRecord(object.getQuoteId(), object.getCompanyId());
    }

    /**
     * Fetch records that have <code>quote_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByQuoteId(Long... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.QUOTE_ID, values);
    }

    /**
     * Fetch records that have <code>company_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByCompanyId(Long... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.COMPANY_ID, values);
    }

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByDeleted(Boolean... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.DELETED, values);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByCreatedBy(Long... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByCreated(Timestamp... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByUpdatedBy(Long... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByUpdated(Timestamp... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.UPDATED, values);
    }

    /**
     * Fetch records that have <code>tx_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByTxId(String... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.TX_ID, values);
    }

    /**
     * Fetch records that have <code>audit_id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.QuoteCompany> fetchByAuditId(Long... values) {
        return fetch(QuoteCompany.QUOTE_COMPANY.AUDIT_ID, values);
    }
}
