/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.PolicyMemberBatchTask;
import com.unchartedpartners.databases.enums.PolicyMemberStatus;
import com.unchartedpartners.databases.enums.PolicyMemberType;
import com.unchartedpartners.databases.enums.UnderwritingStatus;
import com.unchartedpartners.databases.tables.records.PolicyMemberRecord;
import com.unchartedpartners.jooq.PostgresJsonMapBinder;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyMember extends TableImpl<PolicyMemberRecord> {

    private static final long serialVersionUID = 1213870548;

    /**
     * The reference instance of <code>intest.policy_member</code>
     */
    public static final PolicyMember POLICY_MEMBER = new PolicyMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyMemberRecord> getRecordType() {
        return PolicyMemberRecord.class;
    }

    /**
     * The column <code>intest.policy_member.policy_id</code>.
     */
    public final TableField<PolicyMemberRecord, Long> POLICY_ID = createField("policy_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.person_id</code>.
     */
    public final TableField<PolicyMemberRecord, Long> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.data</code>.
     */
    public final TableField<PolicyMemberRecord, Map> DATA = createField("data", org.jooq.impl.SQLDataType.OTHER.nullable(false), this, "", new PostgresJsonMapBinder());

    /**
     * The column <code>intest.policy_member.type</code>.
     */
    public final TableField<PolicyMemberRecord, PolicyMemberType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.PolicyMemberType.class), this, "");

    /**
     * The column <code>intest.policy_member.status</code>.
     */
    public final TableField<PolicyMemberRecord, PolicyMemberStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.PolicyMemberStatus.class), this, "");

    /**
     * The column <code>intest.policy_member.task</code>.
     */
    public final TableField<PolicyMemberRecord, PolicyMemberBatchTask> TASK = createField("task", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.PolicyMemberBatchTask.class), this, "");

    /**
     * The column <code>intest.policy_member.activation_date</code>.
     */
    public final TableField<PolicyMemberRecord, Timestamp> ACTIVATION_DATE = createField("activation_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.deleted</code>.
     */
    public final TableField<PolicyMemberRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.created_by</code>.
     */
    public final TableField<PolicyMemberRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.created</code>.
     */
    public final TableField<PolicyMemberRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.updated_by</code>.
     */
    public final TableField<PolicyMemberRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.updated</code>.
     */
    public final TableField<PolicyMemberRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.tx_id</code>.
     */
    public final TableField<PolicyMemberRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.audit_id</code>.
     */
    public final TableField<PolicyMemberRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.policy_member.coverage_start_date</code>.
     */
    public final TableField<PolicyMemberRecord, Timestamp> COVERAGE_START_DATE = createField("coverage_start_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.policy_member.ga_last_update</code>.
     */
    public final TableField<PolicyMemberRecord, Timestamp> GA_LAST_UPDATE = createField("ga_last_update", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.policy_member.termination_date</code>.
     */
    public final TableField<PolicyMemberRecord, Timestamp> TERMINATION_DATE = createField("termination_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.policy_member.underwriting_status</code>.
     */
    public final TableField<PolicyMemberRecord, UnderwritingStatus> UNDERWRITING_STATUS = createField("underwriting_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.UnderwritingStatus.class), this, "");

    /**
     * Create a <code>intest.policy_member</code> table reference
     */
    public PolicyMember() {
        this(DSL.name("policy_member"), null);
    }

    /**
     * Create an aliased <code>intest.policy_member</code> table reference
     */
    public PolicyMember(String alias) {
        this(DSL.name(alias), POLICY_MEMBER);
    }

    /**
     * Create an aliased <code>intest.policy_member</code> table reference
     */
    public PolicyMember(Name alias) {
        this(alias, POLICY_MEMBER);
    }

    private PolicyMember(Name alias, Table<PolicyMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private PolicyMember(Name alias, Table<PolicyMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POLICY_MEMBER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PolicyMemberRecord> getPrimaryKey() {
        return Keys.POLICY_MEMBER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PolicyMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<PolicyMemberRecord>>asList(Keys.POLICY_MEMBER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PolicyMemberRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PolicyMemberRecord, ?>>asList(Keys.POLICY_MEMBER__POLICY_MEMBER_POLICY_ID_FKEY, Keys.POLICY_MEMBER__POLICY_MEMBER_PERSON_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PolicyMember as(String alias) {
        return new PolicyMember(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PolicyMember as(Name alias) {
        return new PolicyMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyMember rename(String name) {
        return new PolicyMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyMember rename(Name name) {
        return new PolicyMember(name, null);
    }
}
