/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.BatchTaskStatus;
import com.unchartedpartners.databases.enums.BatchTaskType;
import com.unchartedpartners.databases.tables.records.BatchTaskRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchTask extends TableImpl<BatchTaskRecord> {

    private static final long serialVersionUID = 828554306;

    /**
     * The reference instance of <code>intest.batch_task</code>
     */
    public static final BatchTask BATCH_TASK = new BatchTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchTaskRecord> getRecordType() {
        return BatchTaskRecord.class;
    }

    /**
     * The column <code>intest.batch_task.id</code>.
     */
    public final TableField<BatchTaskRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.batch_task_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.batch_task.type</code>.
     */
    public final TableField<BatchTaskRecord, BatchTaskType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.BatchTaskType.class), this, "");

    /**
     * The column <code>intest.batch_task.status</code>.
     */
    public final TableField<BatchTaskRecord, BatchTaskStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.BatchTaskStatus.class), this, "");

    /**
     * The column <code>intest.batch_task.ref_no</code>.
     */
    public final TableField<BatchTaskRecord, String> REF_NO = createField("ref_no", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.executor_reference</code>.
     */
    public final TableField<BatchTaskRecord, String> EXECUTOR_REFERENCE = createField("executor_reference", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.deleted</code>.
     */
    public final TableField<BatchTaskRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.created_by</code>.
     */
    public final TableField<BatchTaskRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.created</code>.
     */
    public final TableField<BatchTaskRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.updated_by</code>.
     */
    public final TableField<BatchTaskRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.updated</code>.
     */
    public final TableField<BatchTaskRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.tx_id</code>.
     */
    public final TableField<BatchTaskRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.batch_task.audit_id</code>.
     */
    public final TableField<BatchTaskRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>intest.batch_task</code> table reference
     */
    public BatchTask() {
        this(DSL.name("batch_task"), null);
    }

    /**
     * Create an aliased <code>intest.batch_task</code> table reference
     */
    public BatchTask(String alias) {
        this(DSL.name(alias), BATCH_TASK);
    }

    /**
     * Create an aliased <code>intest.batch_task</code> table reference
     */
    public BatchTask(Name alias) {
        this(alias, BATCH_TASK);
    }

    private BatchTask(Name alias, Table<BatchTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchTask(Name alias, Table<BatchTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BATCH_TASK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BatchTaskRecord, Long> getIdentity() {
        return Keys.IDENTITY_BATCH_TASK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BatchTaskRecord> getPrimaryKey() {
        return Keys.BATCH_TASK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BatchTaskRecord>> getKeys() {
        return Arrays.<UniqueKey<BatchTaskRecord>>asList(Keys.BATCH_TASK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchTask as(String alias) {
        return new BatchTask(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchTask as(Name alias) {
        return new BatchTask(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchTask rename(String name) {
        return new BatchTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchTask rename(Name name) {
        return new BatchTask(name, null);
    }
}
