/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.PaymentStatus;
import com.unchartedpartners.databases.enums.QuoteBusinessType;
import com.unchartedpartners.databases.enums.QuotePaymentMethod;
import com.unchartedpartners.databases.enums.Stages;
import com.unchartedpartners.databases.tables.records.QuoteRecord;
import com.unchartedpartners.jooq.PostgresJsonMapBinder;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quote extends TableImpl<QuoteRecord> {

    private static final long serialVersionUID = 613146771;

    /**
     * The reference instance of <code>intest.quote</code>
     */
    public static final Quote QUOTE = new Quote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuoteRecord> getRecordType() {
        return QuoteRecord.class;
    }

    /**
     * The column <code>intest.quote.id</code>.
     */
    public final TableField<QuoteRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.quote_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.quote.quotation_no</code>.
     */
    public final TableField<QuoteRecord, String> QUOTATION_NO = createField("quotation_no", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.quote.name</code>.
     */
    public final TableField<QuoteRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.quote.account_id</code>.
     */
    public final TableField<QuoteRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.quote.product_id</code>.
     */
    public final TableField<QuoteRecord, Long> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.quote.product_code</code>.
     */
    public final TableField<QuoteRecord, String> PRODUCT_CODE = createField("product_code", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>intest.quote.product_version</code>.
     */
    public final TableField<QuoteRecord, Long> PRODUCT_VERSION = createField("product_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.quote.stages</code>.
     */
    public final TableField<QuoteRecord, Stages> STAGES = createField("stages", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.Stages.class), this, "");

    /**
     * The column <code>intest.quote.deleted</code>.
     */
    public final TableField<QuoteRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.quote.created_by</code>.
     */
    public final TableField<QuoteRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.quote.created</code>.
     */
    public final TableField<QuoteRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.quote.updated_by</code>.
     */
    public final TableField<QuoteRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.quote.updated</code>.
     */
    public final TableField<QuoteRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.quote.tx_id</code>.
     */
    public final TableField<QuoteRecord, String> TX_ID = createField("tx_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>intest.quote.audit_id</code>.
     */
    public final TableField<QuoteRecord, Long> AUDIT_ID = createField("audit_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.quote.data</code>.
     */
    public final TableField<QuoteRecord, Map> DATA = createField("data", org.jooq.impl.SQLDataType.OTHER, this, "", new PostgresJsonMapBinder());

    /**
     * The column <code>intest.quote.policy_no</code>.
     */
    public final TableField<QuoteRecord, String> POLICY_NO = createField("policy_no", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.quote.req_effective_date</code>.
     */
    public final TableField<QuoteRecord, Timestamp> REQ_EFFECTIVE_DATE = createField("req_effective_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.quote.policy_effective_date</code>.
     */
    public final TableField<QuoteRecord, Timestamp> POLICY_EFFECTIVE_DATE = createField("policy_effective_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.quote.pdpa_consent</code>.
     */
    public final TableField<QuoteRecord, Boolean> PDPA_CONSENT = createField("pdpa_consent", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>intest.quote.waiting_period</code>.
     */
    public final TableField<QuoteRecord, Integer> WAITING_PERIOD = createField("waiting_period", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>intest.quote.payment_status</code>.
     */
    public final TableField<QuoteRecord, PaymentStatus> PAYMENT_STATUS = createField("payment_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.PaymentStatus.class), this, "");

    /**
     * The column <code>intest.quote.payment_method</code>.
     */
    public final TableField<QuoteRecord, QuotePaymentMethod> PAYMENT_METHOD = createField("payment_method", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.QuotePaymentMethod.class), this, "");

    /**
     * The column <code>intest.quote.amount</code>.
     */
    public final TableField<QuoteRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>intest.quote.paid_time</code>.
     */
    public final TableField<QuoteRecord, Timestamp> PAID_TIME = createField("paid_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.quote.braintree_transaction_id</code>.
     */
    public final TableField<QuoteRecord, String> BRAINTREE_TRANSACTION_ID = createField("braintree_transaction_id", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>intest.quote.payment_consent</code>.
     */
    public final TableField<QuoteRecord, Boolean> PAYMENT_CONSENT = createField("payment_consent", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>intest.quote.estimate_amount</code>.
     */
    public final TableField<QuoteRecord, BigDecimal> ESTIMATE_AMOUNT = createField("estimate_amount", org.jooq.impl.SQLDataType.NUMERIC(10, 2).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>intest.quote.proposed_amount</code>.
     */
    public final TableField<QuoteRecord, BigDecimal> PROPOSED_AMOUNT = createField("proposed_amount", org.jooq.impl.SQLDataType.NUMERIC(10, 2).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>intest.quote.submission_date</code>.
     */
    public final TableField<QuoteRecord, Timestamp> SUBMISSION_DATE = createField("submission_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.quote.inforce_date</code>.
     */
    public final TableField<QuoteRecord, Timestamp> INFORCE_DATE = createField("inforce_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.quote.ext_trans_type</code>.
     */
    public final TableField<QuoteRecord, String> EXT_TRANS_TYPE = createField("ext_trans_type", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.quote.ext_trans_id</code>.
     */
    public final TableField<QuoteRecord, String> EXT_TRANS_ID = createField("ext_trans_id", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>intest.quote.scid</code>.
     */
    public final TableField<QuoteRecord, String> SCID = createField("scid", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>intest.quote.business_type</code>.
     */
    public final TableField<QuoteRecord, QuoteBusinessType> BUSINESS_TYPE = createField("business_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.QuoteBusinessType.class), this, "");

    /**
     * The column <code>intest.quote.existing_policy_no</code>.
     */
    public final TableField<QuoteRecord, String> EXISTING_POLICY_NO = createField("existing_policy_no", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>intest.quote.final_amount</code>.
     */
    public final TableField<QuoteRecord, BigDecimal> FINAL_AMOUNT = createField("final_amount", org.jooq.impl.SQLDataType.NUMERIC(10, 2).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>intest.quote.promo_code</code>.
     */
    public final TableField<QuoteRecord, String> PROMO_CODE = createField("promo_code", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>intest.quote</code> table reference
     */
    public Quote() {
        this(DSL.name("quote"), null);
    }

    /**
     * Create an aliased <code>intest.quote</code> table reference
     */
    public Quote(String alias) {
        this(DSL.name(alias), QUOTE);
    }

    /**
     * Create an aliased <code>intest.quote</code> table reference
     */
    public Quote(Name alias) {
        this(alias, QUOTE);
    }

    private Quote(Name alias, Table<QuoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quote(Name alias, Table<QuoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuoteRecord, Long> getIdentity() {
        return Keys.IDENTITY_QUOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuoteRecord> getPrimaryKey() {
        return Keys.QUOTE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuoteRecord>> getKeys() {
        return Arrays.<UniqueKey<QuoteRecord>>asList(Keys.QUOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QuoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuoteRecord, ?>>asList(Keys.QUOTE__QUOTE_PRODUCT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quote as(String alias) {
        return new Quote(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quote as(Name alias) {
        return new Quote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quote rename(String name) {
        return new Quote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quote rename(Name name) {
        return new Quote(name, null);
    }
}
