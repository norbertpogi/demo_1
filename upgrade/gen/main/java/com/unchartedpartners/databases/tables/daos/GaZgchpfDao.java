/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables.daos;


import com.unchartedpartners.dao.BaseDaoImpl;
import com.unchartedpartners.databases.tables.GaZgchpf;
import com.unchartedpartners.databases.tables.records.GaZgchpfRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository(value="baseGaZgchpfDao")
@ConditionalOnMissingBean(name="gaZgchpfDao")
public class GaZgchpfDao extends BaseDaoImpl<GaZgchpfRecord, com.unchartedpartners.databases.tables.pojos.GaZgchpf, Long> {

    /**
     * Create a new GaZgchpfDao without any configuration
     */
    public GaZgchpfDao() {
        super(GaZgchpf.GA_ZGCHPF, com.unchartedpartners.databases.tables.pojos.GaZgchpf.class);
    }

    /**
     * Create a new GaZgchpfDao with an attached configuration
     */
    public GaZgchpfDao(Configuration configuration) {
        super(GaZgchpf.GA_ZGCHPF, com.unchartedpartners.databases.tables.pojos.GaZgchpf.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.unchartedpartners.databases.tables.pojos.GaZgchpf object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchById(Long... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.unchartedpartners.databases.tables.pojos.GaZgchpf fetchOneById(Long value) {
        return fetchOne(GaZgchpf.GA_ZGCHPF.ID, value);
    }

    /**
     * Fetch records that have <code>chdrcoy IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByChdrcoy(String... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.CHDRCOY, values);
    }

    /**
     * Fetch records that have <code>chdrnum IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByChdrnum(String... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.CHDRNUM, values);
    }

    /**
     * Fetch records that have <code>zvdcode IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByZvdcode(String... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.ZVDCODE, values);
    }

    /**
     * Fetch records that have <code>zpolwait IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByZpolwait(Short... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.ZPOLWAIT, values);
    }

    /**
     * Fetch records that have <code>user_profile IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByUserProfile(String... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.USER_PROFILE, values);
    }

    /**
     * Fetch records that have <code>job_name IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByJobName(String... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.JOB_NAME, values);
    }

    /**
     * Fetch records that have <code>datime IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByDatime(Timestamp... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.DATIME, values);
    }

    /**
     * Fetch records that have <code>eb_timestamp IN (values)</code>
     */
    public List<com.unchartedpartners.databases.tables.pojos.GaZgchpf> fetchByEbTimestamp(Timestamp... values) {
        return fetch(GaZgchpf.GA_ZGCHPF.EB_TIMESTAMP, values);
    }
}
