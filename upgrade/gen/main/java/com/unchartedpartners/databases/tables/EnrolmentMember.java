/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.enums.PersonType;
import com.unchartedpartners.databases.enums.UnderwritingStatus;
import com.unchartedpartners.databases.tables.records.EnrolmentMemberRecord;
import com.unchartedpartners.jooq.PostgresJsonMapBinder;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EnrolmentMember extends TableImpl<EnrolmentMemberRecord> {

    private static final long serialVersionUID = 1935146497;

    /**
     * The reference instance of <code>intest.enrolment_member</code>
     */
    public static final EnrolmentMember ENROLMENT_MEMBER = new EnrolmentMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnrolmentMemberRecord> getRecordType() {
        return EnrolmentMemberRecord.class;
    }

    /**
     * The column <code>intest.enrolment_member.id</code>.
     */
    public final TableField<EnrolmentMemberRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.enrolment_member_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.enrolment_member.enrolment_id</code>.
     */
    public final TableField<EnrolmentMemberRecord, Long> ENROLMENT_ID = createField("enrolment_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.enrolment_member.person_id</code>.
     */
    public final TableField<EnrolmentMemberRecord, Long> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.enrolment_member.person_type</code>.
     */
    public final TableField<EnrolmentMemberRecord, PersonType> PERSON_TYPE = createField("person_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.PersonType.class), this, "");

    /**
     * The column <code>intest.enrolment_member.coverage</code>.
     */
    public final TableField<EnrolmentMemberRecord, Map> COVERAGE = createField("coverage", org.jooq.impl.SQLDataType.OTHER.nullable(false), this, "", new PostgresJsonMapBinder());

    /**
     * The column <code>intest.enrolment_member.deleted</code>.
     */
    public final TableField<EnrolmentMemberRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>intest.enrolment_member.created_by</code>.
     */
    public final TableField<EnrolmentMemberRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.enrolment_member.created</code>.
     */
    public final TableField<EnrolmentMemberRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.enrolment_member.updated_by</code>.
     */
    public final TableField<EnrolmentMemberRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.enrolment_member.updated</code>.
     */
    public final TableField<EnrolmentMemberRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.enrolment_member.underwriting_status</code>.
     */
    public final TableField<EnrolmentMemberRecord, UnderwritingStatus> UNDERWRITING_STATUS = createField("underwriting_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.unchartedpartners.databases.enums.UnderwritingStatus.class), this, "");

    /**
     * Create a <code>intest.enrolment_member</code> table reference
     */
    public EnrolmentMember() {
        this(DSL.name("enrolment_member"), null);
    }

    /**
     * Create an aliased <code>intest.enrolment_member</code> table reference
     */
    public EnrolmentMember(String alias) {
        this(DSL.name(alias), ENROLMENT_MEMBER);
    }

    /**
     * Create an aliased <code>intest.enrolment_member</code> table reference
     */
    public EnrolmentMember(Name alias) {
        this(alias, ENROLMENT_MEMBER);
    }

    private EnrolmentMember(Name alias, Table<EnrolmentMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private EnrolmentMember(Name alias, Table<EnrolmentMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENROLMENT_MEMBER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EnrolmentMemberRecord, Long> getIdentity() {
        return Keys.IDENTITY_ENROLMENT_MEMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EnrolmentMemberRecord> getPrimaryKey() {
        return Keys.ENROLMENT_MEMBER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EnrolmentMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<EnrolmentMemberRecord>>asList(Keys.ENROLMENT_MEMBER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EnrolmentMemberRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EnrolmentMemberRecord, ?>>asList(Keys.ENROLMENT_MEMBER__ENROLMENT_MEMBER_ENROLMENT_ID_FKEY, Keys.ENROLMENT_MEMBER__ENROLMENT_MEMBER_PERSON_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnrolmentMember as(String alias) {
        return new EnrolmentMember(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EnrolmentMember as(Name alias) {
        return new EnrolmentMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EnrolmentMember rename(String name) {
        return new EnrolmentMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EnrolmentMember rename(Name name) {
        return new EnrolmentMember(name, null);
    }
}
