/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.tables.records.GaZtxtpfRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GaZtxtpf extends TableImpl<GaZtxtpfRecord> {

    private static final long serialVersionUID = -2050104220;

    /**
     * The reference instance of <code>intest.ga_ztxtpf</code>
     */
    public static final GaZtxtpf GA_ZTXTPF = new GaZtxtpf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GaZtxtpfRecord> getRecordType() {
        return GaZtxtpfRecord.class;
    }

    /**
     * The column <code>intest.ga_ztxtpf.id</code>.
     */
    public final TableField<GaZtxtpfRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.ga_ztxtpf_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.fupflg</code>.
     */
    public final TableField<GaZtxtpfRecord, String> FUPFLG = createField("fupflg", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.chdrcoy</code>.
     */
    public final TableField<GaZtxtpfRecord, String> CHDRCOY = createField("chdrcoy", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.chdrnum</code>.
     */
    public final TableField<GaZtxtpfRecord, String> CHDRNUM = createField("chdrnum", org.jooq.impl.SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.mbrno</code>.
     */
    public final TableField<GaZtxtpfRecord, String> MBRNO = createField("mbrno", org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.dpntno</code>.
     */
    public final TableField<GaZtxtpfRecord, String> DPNTNO = createField("dpntno", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.gfupcde</code>.
     */
    public final TableField<GaZtxtpfRecord, String> GFUPCDE = createField("gfupcde", org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.midata</code>.
     */
    public final TableField<GaZtxtpfRecord, String> MIDATA = createField("midata", org.jooq.impl.SQLDataType.VARCHAR(1200), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.validflag</code>.
     */
    public final TableField<GaZtxtpfRecord, String> VALIDFLAG = createField("validflag", org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.user_profile</code>.
     */
    public final TableField<GaZtxtpfRecord, String> USER_PROFILE = createField("user_profile", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.job_name</code>.
     */
    public final TableField<GaZtxtpfRecord, String> JOB_NAME = createField("job_name", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>intest.ga_ztxtpf.datime</code>.
     */
    public final TableField<GaZtxtpfRecord, Timestamp> DATIME = createField("datime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>intest.ga_ztxtpf.eb_timestamp</code>.
     */
    public final TableField<GaZtxtpfRecord, Timestamp> EB_TIMESTAMP = createField("eb_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>intest.ga_ztxtpf</code> table reference
     */
    public GaZtxtpf() {
        this(DSL.name("ga_ztxtpf"), null);
    }

    /**
     * Create an aliased <code>intest.ga_ztxtpf</code> table reference
     */
    public GaZtxtpf(String alias) {
        this(DSL.name(alias), GA_ZTXTPF);
    }

    /**
     * Create an aliased <code>intest.ga_ztxtpf</code> table reference
     */
    public GaZtxtpf(Name alias) {
        this(alias, GA_ZTXTPF);
    }

    private GaZtxtpf(Name alias, Table<GaZtxtpfRecord> aliased) {
        this(alias, aliased, null);
    }

    private GaZtxtpf(Name alias, Table<GaZtxtpfRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GA_ZTXTPF_IND, Indexes.GA_ZTXTPF_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GaZtxtpfRecord, Long> getIdentity() {
        return Keys.IDENTITY_GA_ZTXTPF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GaZtxtpfRecord> getPrimaryKey() {
        return Keys.GA_ZTXTPF_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GaZtxtpfRecord>> getKeys() {
        return Arrays.<UniqueKey<GaZtxtpfRecord>>asList(Keys.GA_ZTXTPF_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GaZtxtpf as(String alias) {
        return new GaZtxtpf(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GaZtxtpf as(Name alias) {
        return new GaZtxtpf(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GaZtxtpf rename(String name) {
        return new GaZtxtpf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GaZtxtpf rename(Name name) {
        return new GaZtxtpf(name, null);
    }
}
