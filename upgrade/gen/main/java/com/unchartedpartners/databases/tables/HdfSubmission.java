/*
 * This file is generated by jOOQ.
*/
package com.unchartedpartners.databases.tables;


import com.unchartedpartners.databases.Indexes;
import com.unchartedpartners.databases.Intest;
import com.unchartedpartners.databases.Keys;
import com.unchartedpartners.databases.tables.records.HdfSubmissionRecord;
import com.unchartedpartners.jooq.PostgresJsonMapBinder;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HdfSubmission extends TableImpl<HdfSubmissionRecord> {

    private static final long serialVersionUID = -1247395606;

    /**
     * The reference instance of <code>intest.hdf_submission</code>
     */
    public static final HdfSubmission HDF_SUBMISSION = new HdfSubmission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HdfSubmissionRecord> getRecordType() {
        return HdfSubmissionRecord.class;
    }

    /**
     * The column <code>intest.hdf_submission.id</code>.
     */
    public final TableField<HdfSubmissionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('intest.hdf_submission_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>intest.hdf_submission.id_no</code>.
     */
    public final TableField<HdfSubmissionRecord, String> ID_NO = createField("id_no", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>intest.hdf_submission.policy_no</code>.
     */
    public final TableField<HdfSubmissionRecord, String> POLICY_NO = createField("policy_no", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>intest.hdf_submission.product_id</code>.
     */
    public final TableField<HdfSubmissionRecord, Long> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.hdf_submission.hdf_data</code>.
     */
    public final TableField<HdfSubmissionRecord, Map> HDF_DATA = createField("hdf_data", org.jooq.impl.SQLDataType.OTHER.nullable(false), this, "", new PostgresJsonMapBinder());

    /**
     * The column <code>intest.hdf_submission.submitted_date</code>.
     */
    public final TableField<HdfSubmissionRecord, Timestamp> SUBMITTED_DATE = createField("submitted_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.hdf_submission.created_by</code>.
     */
    public final TableField<HdfSubmissionRecord, Long> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.hdf_submission.created</code>.
     */
    public final TableField<HdfSubmissionRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>intest.hdf_submission.updated_by</code>.
     */
    public final TableField<HdfSubmissionRecord, Long> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>intest.hdf_submission.updated</code>.
     */
    public final TableField<HdfSubmissionRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>intest.hdf_submission</code> table reference
     */
    public HdfSubmission() {
        this(DSL.name("hdf_submission"), null);
    }

    /**
     * Create an aliased <code>intest.hdf_submission</code> table reference
     */
    public HdfSubmission(String alias) {
        this(DSL.name(alias), HDF_SUBMISSION);
    }

    /**
     * Create an aliased <code>intest.hdf_submission</code> table reference
     */
    public HdfSubmission(Name alias) {
        this(alias, HDF_SUBMISSION);
    }

    private HdfSubmission(Name alias, Table<HdfSubmissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private HdfSubmission(Name alias, Table<HdfSubmissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Intest.INTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HDF_SUBMISSION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HdfSubmissionRecord, Long> getIdentity() {
        return Keys.IDENTITY_HDF_SUBMISSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HdfSubmissionRecord> getPrimaryKey() {
        return Keys.HDF_SUBMISSION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HdfSubmissionRecord>> getKeys() {
        return Arrays.<UniqueKey<HdfSubmissionRecord>>asList(Keys.HDF_SUBMISSION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HdfSubmission as(String alias) {
        return new HdfSubmission(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HdfSubmission as(Name alias) {
        return new HdfSubmission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HdfSubmission rename(String name) {
        return new HdfSubmission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HdfSubmission rename(Name name) {
        return new HdfSubmission(name, null);
    }
}
